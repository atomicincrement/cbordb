
use cbordb::cbor::{CBOR, Result, Error, Kind};

use Error::*;
const RESULTS : [(u8, Result<usize>, &str); 0x100] = [
    (0x00, Ok(1), "0"),
    (0x01, Ok(1), "1"),
    (0x02, Ok(1), "2"),
    (0x03, Ok(1), "3"),
    (0x04, Ok(1), "4"),
    (0x05, Ok(1), "5"),
    (0x06, Ok(1), "6"),
    (0x07, Ok(1), "7"),
    (0x08, Ok(1), "8"),
    (0x09, Ok(1), "9"),
    (0x0a, Ok(1), "10"),
    (0x0b, Ok(1), "11"),
    (0x0c, Ok(1), "12"),
    (0x0d, Ok(1), "13"),
    (0x0e, Ok(1), "14"),
    (0x0f, Ok(1), "15"),
    (0x10, Ok(1), "16"),
    (0x11, Ok(1), "17"),
    (0x12, Ok(1), "18"),
    (0x13, Ok(1), "19"),
    (0x14, Ok(1), "20"),
    (0x15, Ok(1), "21"),
    (0x16, Ok(1), "22"),
    (0x17, Ok(1), "23"),
    (0x18, Ok(2), "1"),
    (0x19, Ok(3), "256"),
    (0x1a, Ok(5), "16777216"),
    (0x1b, Ok(9), "72057594037927936"),
    (0x1c, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x1d, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x1e, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x1f, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x20, Ok(1), "-1"),
    (0x21, Ok(1), "-2"),
    (0x22, Ok(1), "-3"),
    (0x23, Ok(1), "-4"),
    (0x24, Ok(1), "-5"),
    (0x25, Ok(1), "-6"),
    (0x26, Ok(1), "-7"),
    (0x27, Ok(1), "-8"),
    (0x28, Ok(1), "-9"),
    (0x29, Ok(1), "-10"),
    (0x2a, Ok(1), "-11"),
    (0x2b, Ok(1), "-12"),
    (0x2c, Ok(1), "-13"),
    (0x2d, Ok(1), "-14"),
    (0x2e, Ok(1), "-15"),
    (0x2f, Ok(1), "-16"),
    (0x30, Ok(1), "-17"),
    (0x31, Ok(1), "-18"),
    (0x32, Ok(1), "-19"),
    (0x33, Ok(1), "-20"),
    (0x34, Ok(1), "-21"),
    (0x35, Ok(1), "-22"),
    (0x36, Ok(1), "-23"),
    (0x37, Ok(1), "-24"),
    (0x38, Ok(2), "-2"),
    (0x39, Ok(3), "-257"),
    (0x3a, Ok(5), "-16777217"),
    (0x3b, Ok(9), "-72057594037927937"),
    (0x3c, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x3d, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x3e, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x3f, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x40, Ok(1), "h''"),
    (0x41, Ok(2), "h'01'"),
    (0x42, Ok(3), "h'0100'"),
    (0x43, Ok(4), "h'010000'"),
    (0x44, Ok(5), "h'01000000'"),
    (0x45, Ok(6), "h'0100000000'"),
    (0x46, Ok(7), "h'010000000000'"),
    (0x47, Ok(8), "h'01000000000000'"),
    (0x48, Ok(9), "h'0100000000000000'"),
    (0x49, Ok(10), "h'010000000000000000'"),
    (0x4a, Ok(11), "h'01000000000000000000'"),
    (0x4b, Ok(12), "h'0100000000000000000000'"),
    (0x4c, Ok(13), "h'010000000000000000000000'"),
    (0x4d, Ok(14), "h'01000000000000000000000000'"),
    (0x4e, Ok(15), "h'0100000000000000000000000000'"),
    (0x4f, Ok(16), "h'010000000000000000000000000000'"),
    (0x50, Ok(17), "h'01000000000000000000000000000000'"),
    (0x51, Ok(18), "h'0100000000000000000000000000000000'"),
    (0x52, Ok(19), "h'010000000000000000000000000000000000'"),
    (0x53, Ok(20), "h'01000000000000000000000000000000000000'"),
    (0x54, Ok(21), "h'0100000000000000000000000000000000000000'"),
    (0x55, Ok(22), "h'010000000000000000000000000000000000000000'"),
    (0x56, Ok(23), "h'01000000000000000000000000000000000000000000'"),
    (0x57, Ok(24), "h'0100000000000000000000000000000000000000000000'"),
    (0x58, Ok(3), "h'00'"),
    (0x59, Err(TooShort), "..Err(TooShort)"),
    (0x5a, Err(TooShort), "..Err(TooShort)"),
    (0x5b, Err(TooShort), "..Err(TooShort)"),
    (0x5c, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x5d, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x5e, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x5f, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x60, Ok(1), ""),
    (0x61, Ok(2), "\u{1}"),
    (0x62, Ok(3), "\u{1}\0"),
    (0x63, Ok(4), "\u{1}\0\0"),
    (0x64, Ok(5), "\u{1}\0\0\0"),
    (0x65, Ok(6), "\u{1}\0\0\0\0"),
    (0x66, Ok(7), "\u{1}\0\0\0\0\0"),
    (0x67, Ok(8), "\u{1}\0\0\0\0\0\0"),
    (0x68, Ok(9), "\u{1}\0\0\0\0\0\0\0"),
    (0x69, Ok(10), "\u{1}\0\0\0\0\0\0\0\0"),
    (0x6a, Ok(11), "\u{1}\0\0\0\0\0\0\0\0\0"),
    (0x6b, Ok(12), "\u{1}\0\0\0\0\0\0\0\0\0\0"),
    (0x6c, Ok(13), "\u{1}\0\0\0\0\0\0\0\0\0\0\0"),
    (0x6d, Ok(14), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x6e, Ok(15), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x6f, Ok(16), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x70, Ok(17), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x71, Ok(18), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x72, Ok(19), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x73, Ok(20), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x74, Ok(21), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x75, Ok(22), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x76, Ok(23), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x77, Ok(24), "\u{1}\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
    (0x78, Ok(3), "\0"),
    (0x79, Err(TooShort), "..Err(TooShort)"),
    (0x7a, Err(TooShort), "..Err(TooShort)"),
    (0x7b, Err(TooShort), "..Err(TooShort)"),
    (0x7c, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x7d, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x7e, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x7f, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x80, Ok(1), "[]"),
    (0x81, Ok(2), "[1]"),
    (0x82, Ok(3), "[1, 0]"),
    (0x83, Ok(4), "[1, 0, 0]"),
    (0x84, Ok(5), "[1, 0, 0, 0]"),
    (0x85, Ok(6), "[1, 0, 0, 0, 0]"),
    (0x86, Ok(7), "[1, 0, 0, 0, 0, 0]"),
    (0x87, Ok(8), "[1, 0, 0, 0, 0, 0, 0]"),
    (0x88, Ok(9), "[1, 0, 0, 0, 0, 0, 0, 0]"),
    (0x89, Ok(10), "[1, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x8a, Ok(11), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x8b, Ok(12), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x8c, Ok(13), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x8d, Ok(14), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x8e, Ok(15), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x8f, Ok(16), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x90, Ok(17), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x91, Ok(18), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x92, Ok(19), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x93, Ok(20), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x94, Ok(21), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x95, Ok(22), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x96, Ok(23), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x97, Ok(24), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"),
    (0x98, Ok(3), "[0]"),
    (0x99, Err(TooShort), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..Err(TooShort)"),
    (0x9a, Err(TooShort), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..Err(TooShort)"),
    (0x9b, Err(TooShort), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..Err(TooShort)"),
    (0x9c, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x9d, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x9e, Err(InvalidCode), "..Err(InvalidCode)"),
    (0x9f, Err(TooShort), "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ..Err(TooShort)"),
    (0xa0, Ok(1), "{}"),
    (0xa1, Ok(3), "{1: 0}"),
    (0xa2, Ok(5), "{1: 0, 0: 0}"),
    (0xa3, Ok(7), "{1: 0, 0: 0, 0: 0}"),
    (0xa4, Ok(9), "{1: 0, 0: 0, 0: 0, 0: 0}"),
    (0xa5, Ok(11), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xa6, Ok(13), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xa7, Ok(15), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xa8, Ok(17), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xa9, Ok(19), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xaa, Ok(21), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xab, Ok(23), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xac, Ok(25), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0}"),
    (0xad, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xae, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xaf, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb0, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb1, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb2, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb3, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb4, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb5, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb6, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb7, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xb8, Ok(4), "{0: 0}"),
    (0xb9, Err(TooShort), "{0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xba, Err(TooShort), "{0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xbb, Err(TooShort), "{0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xbc, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xbd, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xbe, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xbf, Err(TooShort), "{1: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, 0: 0, ..Err(TooShort)"),
    (0xc0, Ok(2), "0(1)"),
    (0xc1, Ok(2), "1(1)"),
    (0xc2, Ok(2), "2(1)"),
    (0xc3, Ok(2), "3(1)"),
    (0xc4, Ok(2), "4(1)"),
    (0xc5, Ok(2), "5(1)"),
    (0xc6, Ok(2), "6(1)"),
    (0xc7, Ok(2), "7(1)"),
    (0xc8, Ok(2), "8(1)"),
    (0xc9, Ok(2), "9(1)"),
    (0xca, Ok(2), "10(1)"),
    (0xcb, Ok(2), "11(1)"),
    (0xcc, Ok(2), "12(1)"),
    (0xcd, Ok(2), "13(1)"),
    (0xce, Ok(2), "14(1)"),
    (0xcf, Ok(2), "15(1)"),
    (0xd0, Ok(2), "16(1)"),
    (0xd1, Ok(2), "17(1)"),
    (0xd2, Ok(2), "18(1)"),
    (0xd3, Ok(2), "19(1)"),
    (0xd4, Ok(2), "20(1)"),
    (0xd5, Ok(2), "21(1)"),
    (0xd6, Ok(2), "22(1)"),
    (0xd7, Ok(2), "23(1)"),
    (0xd8, Ok(3), "1(0)"),
    (0xd9, Ok(4), "256(0)"),
    (0xda, Ok(6), "16777216(0)"),
    (0xdb, Ok(10), "72057594037927936(0)"),
    (0xdc, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xdd, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xde, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xdf, Ok(2), "..Err(InvalidCode)"),
    (0xe0, Ok(1), "simple(0)"),
    (0xe1, Ok(1), "simple(1)"),
    (0xe2, Ok(1), "simple(2)"),
    (0xe3, Ok(1), "simple(3)"),
    (0xe4, Ok(1), "simple(4)"),
    (0xe5, Ok(1), "simple(5)"),
    (0xe6, Ok(1), "simple(6)"),
    (0xe7, Ok(1), "simple(7)"),
    (0xe8, Ok(1), "simple(8)"),
    (0xe9, Ok(1), "simple(9)"),
    (0xea, Ok(1), "simple(10)"),
    (0xeb, Ok(1), "simple(11)"),
    (0xec, Ok(1), "simple(12)"),
    (0xed, Ok(1), "simple(13)"),
    (0xee, Ok(1), "simple(14)"),
    (0xef, Ok(1), "simple(15)"),
    (0xf0, Ok(1), "simple(16)"),
    (0xf1, Ok(1), "simple(17)"),
    (0xf2, Ok(1), "simple(18)"),
    (0xf3, Ok(1), "simple(19)"),
    (0xf4, Ok(1), "false"),
    (0xf5, Ok(1), "true"),
    (0xf6, Ok(1), "null"),
    (0xf7, Ok(1), "undefined"),
    (0xf8, Ok(2), "..Err(InvalidCode)"),
    (0xf9, Ok(3), "..Err(InvalidCode)"),
    (0xfa, Ok(5), "0.00000000000000000000000000000000000002350988701644575"),
    (0xfb, Ok(9), "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007291122019556398"),
    (0xfc, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xfd, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xfe, Err(InvalidCode), "..Err(InvalidCode)"),
    (0xff, Err(InvalidCode), "..Err(InvalidCode)"),
    ];


#[test]
fn test_decoder() {
    for i in 0..=255 {
        let data = [i, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        let cbor = CBOR(&data[..]);
        let fmt = format!("{:?}", cbor);
        let size = cbor.size();
        // println!("(0x{:02x}, {:?}, {:?}),", i, size, fmt);
        assert_eq!(&(i, size.clone(), fmt.as_str()), &RESULTS[i as usize]);
    }
}
